// components.js (v0.0.1)

const { useState, useEffect, useCallback, useMemo, useRef } = React;

const InstallPwaInstructions = ({ t }) => ( <div className="install-button-wrapper"><div className="bg-gray-800 text-white text-center text-sm p-3 rounded-lg shadow-lg flex items-center gap-3"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg><span>{t.installInstructions}</span></div></div> );
const InstallPwaButton = ({ t, handleInstallClick }) => ( <div className="install-button-wrapper"><button onClick={handleInstallClick} className="bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] text-white font-bold py-3 px-6 rounded-full shadow-lg flex items-center gap-3 hover:scale-105 transition-transform"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>{t.installApp}</button></div> );
const SettingsDropdown = ({ mode, setMode, accent, setAccent, language, setLanguage, tmdbLanguage, setTmdbLanguage, tmdbLanguages, t, openWatchedModal, openWatchlistModal, openRegionSelector }) => { const [isOpen, setIsOpen] = useState(false); const dropdownRef = useRef(null); useEffect(() => { const handleClickOutside = (event) => { if (dropdownRef.current && !dropdownRef.current.contains(event.target)) setIsOpen(false); }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, []); return ( <div className="relative" ref={dropdownRef}><button onClick={() => setIsOpen(!isOpen)} className="p-2 rounded-full bg-[var(--color-card-bg)] shadow border border-[var(--color-border)] hover:bg-[var(--color-border)]" aria-label="Settings"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z"/><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/></svg></button>{isOpen && ( <div className="absolute right-0 mt-2 w-64 bg-[var(--color-card-bg)] rounded-xl shadow-2xl border border-[var(--color-border)] z-30"><div className="p-4"><h3 className="font-semibold mb-3">{t.settings}</h3><div className="space-y-4">
    <div className="flex items-center justify-center gap-2 bg-[var(--color-bg)] p-2 rounded-full overflow-hidden">{ACCENT_COLORS.map(c => (<button key={c.name} onClick={() => setAccent(c)} className={`w-6 h-6 rounded-full transition-transform duration-150 ${accent.name === c.name ? 'scale-125 ring-2 ring-offset-2 ring-offset-[var(--color-bg)] ring-[var(--color-accent)]' : ''}`} style={{backgroundColor: c.color}} title={c.name}></button>))}</div>
    <div className="flex items-center gap-2 bg-[var(--color-bg)] p-1 rounded-full"><button onClick={() => setMode('light')} className={`w-full p-1.5 rounded-full flex justify-center items-center gap-2 ${mode === 'light' ? 'bg-[var(--color-accent)] text-white' : 'text-[var(--color-text-secondary)]'}`}><svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/></svg>Light</button><button onClick={() => setMode('dark')} className={`w-full p-1.5 rounded-full flex justify-center items-center gap-2 ${mode === 'dark' ? 'bg-[var(--color-accent)] text-white' : 'text-[var(--color-text-secondary)]'}`}><svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/></svg>Dark</button></div>
    <div>
        <label className="block text-sm font-medium text-[var(--color-text-secondary)] mt-3 mb-1">Site Language</label>
        <div className="flex items-center bg-[var(--color-bg)] p-1 rounded-full">
            <button onClick={() => setLanguage('en')} className={`w-full lang-btn ${language === 'en' ? 'lang-btn-active' : 'lang-btn-inactive'}`}>English</button>
            <button onClick={() => setLanguage('es')} className={`w-full lang-btn ${language === 'es' ? 'lang-btn-active' : 'lang-btn-inactive'}`}>Espa√±ol</button>
        </div>
    </div>
    <div><label htmlFor="tmdb-language-select" className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">{t.contentLanguage}</label><select id="tmdb-language-select" value={tmdbLanguage} onChange={(e)=> setTmdbLanguage(e.target.value)} className="w-full p-2 bg-[var(--color-bg)] border border-[var(--color-border)] rounded-lg text-sm text-[var(--color-text-primary)] focus:ring-[var(--color-accent)] focus:border-[var(--color-accent)]">{tmdbLanguages.map(l => <option key={l.code} value={l.code}>{l.name}</option>)}</select></div>
    <button onClick={()=>{setIsOpen(false); openWatchlistModal();}} className="w-full p-2 text-sm text-left bg-[var(--color-bg)] rounded-lg hover:bg-[var(--color-border)] transition-colors flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-3.13L5 18V4z"/></svg>{t.watchList}</button>
    <button onClick={()=>{setIsOpen(false); openWatchedModal();}} className="w-full p-2 text-sm text-left bg-[var(--color-bg)] rounded-lg hover:bg-[var(--color-border)] transition-colors flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/><path fillRule="evenodd" d="M.458 10C3.732 4.943 9.522 3 10 3s6.268 1.943 9.542 7c-3.274 5.057-9.064 7-9.542 7S3.732 15.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/></svg>{t.watchedList}</button>
    <button onClick={()=>{setIsOpen(false); openRegionSelector();}} className="w-full p-2 text-sm text-left bg-[var(--color-bg)] rounded-lg hover:bg-[var(--color-border)] transition-colors flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM4.332 8.027a6.012 6.012 0 011.912-2.706C6.512 4.629 7.998 4 10 4c.75 0 1.45.122 2.08.356a6.007 6.007 0 012.36 1.487l-1.07-1.07a.5.5 0 01.708-.708l2 2a.5.5 0 010 .708l-2 2a.5.5 0 01-.708-.708l1.07-1.07a4.993 4.993 0 00-1.742-1.222C11.536 6.068 10.79 6 10 6c-1.554 0-2.833.504-3.764 1.352A4.985 4.985 0 005.12 9.57a.5.5 0 01-.989.143zM15.668 11.973a.5.5 0 01.989-.143 4.985 4.985 0 01-1.392 3.125C13.488 15.371 12.002 16 10 16c-.75 0-1.45-.122-2.08-.356a6.007 6.007 0 01-2.36-1.487l1.07 1.07a.5.5 0 01-.708.708l-2-2a.5.5 0 010-.708l2-2a.5.5 0 01.708.708l-1.07 1.07c.39-.403.855-.745 1.353-1.002C8.464 13.932 9.21 14 10 14c1.554 0 2.833-.504 3.764-1.352A4.985 4.985 0 0014.88 10.43a.5.5 0 01.989-.143z" clipRule="evenodd"/></svg>{t.changeCountry}</button>
</div></div></div>)}</div> );};
const WatchedMediaModal = ({ isOpen, close, watchedMedia, handleUnwatchMedia, mediaType, t }) => { if (!isOpen) return null; const watchedArray = Object.values(watchedMedia).filter(m => m.mediaType === mediaType); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.watchedList} ({mediaType === 'movie' ? t.movies : t.tvShows})</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 overflow-y-auto space-y-4">{watchedArray.length > 0 ? ( watchedArray.map((media) => (<div key={media.id} className="user-list-item"><img src={media.poster ? `${TMDB_THUMBNAIL_BASE_URL}${media.poster}` : 'https://placehold.co/92x138/4A5568/FFFFFF?text=?'} alt={media.title}/><div className="user-list-item-info"><div className="user-list-item-title">{media.title}</div><div className="user-list-item-year">{media.year}</div></div><button onClick={() => handleUnwatchMedia(media.id)} className="text-xs bg-red-600 text-white font-bold py-1 px-3 rounded-full hover:bg-red-700 transition-colors flex-shrink-0">{t.unwatch}</button></div>)) ) : (<p className="text-gray-400">Your watched list is empty for {mediaType === 'movie' ? t.movies.toLowerCase() : t.tvShows.toLowerCase()}.</p>)}</div><div className="p-4 mt-auto border-t border-[var(--color-border)] text-right"><button onClick={close} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">Close</button></div></div></div> ); };
const WatchlistModal = ({ isOpen, close, watchlist, handleToggleWatchlist, mediaType, t }) => { if (!isOpen) return null; const watchlistArray = Object.values(watchlist).filter(m => m.mediaType === mediaType); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.watchList} ({mediaType === 'movie' ? t.movies : t.tvShows})</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 overflow-y-auto space-y-4">{watchlistArray.length > 0 ? (watchlistArray.map((media) => (<div key={media.id} className="user-list-item"><img src={media.poster ? `${TMDB_THUMBNAIL_BASE_URL}${media.poster}` : 'https://placehold.co/92x138/4A5568/FFFFFF?text=?'} alt={media.title}/><div className="user-list-item-info"><div className="user-list-item-title">{media.title}</div><div className="user-list-item-year">{media.year}</div></div><button onClick={() => handleToggleWatchlist(media)} className="text-xs bg-gray-600 text-white font-bold py-1 px-3 rounded-full hover:bg-gray-700 transition-colors flex-shrink-0">{t.removeFromList}</button></div>))) : (<p className="text-gray-400">Your watchlist is empty for {mediaType === 'movie' ? t.movies.toLowerCase() : t.tvShows.toLowerCase()}.</p>)}</div><div className="p-4 mt-auto border-t border-[var(--color-border)] text-right"><button onClick={close} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">Close</button></div></div></div> );};
const ActorDetailsModal = ({ isOpen, close, actorDetails, isFetching, handleActorCreditClick, t }) => {
    if (!isOpen) return null;
    const talkShowGenreIds = [10767, 10763];
    const popularMedia = useMemo(() => {
        if (!actorDetails) return [];
        return (actorDetails?.movie_credits?.cast || [])
            .concat(actorDetails?.tv_credits?.cast || [])
            .filter(m => m.poster_path && m.vote_count > 50 && !m.genre_ids.some(id => talkShowGenreIds.includes(id)))
            .map(m => ({ ...m, score: m.popularity + (m.vote_count / 1000) }))
            .sort((a, b) => b.score - a.score)
            .slice(0, 12);
    }, [actorDetails]);
    return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><button onClick={close} className="absolute top-3 right-3 text-white bg-gray-900 rounded-full p-1 hover:bg-gray-700 z-10"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button>{isFetching || !actorDetails ? (<div className="h-96 flex items-center justify-center"><div className="loader"></div></div>) : (<div className="overflow-y-auto"><div className="sm:grid sm:grid-cols-3 sm:gap-x-8 p-6"><div className="sm:col-span-1"><img loading="lazy" className="h-auto w-3/4 sm:w-full mx-auto object-cover rounded-lg shadow-lg" src={actorDetails.profile_path ? `${TMDB_IMAGE_BASE_URL}${actorDetails.profile_path}` : 'https://placehold.co/500x750/4A5568/FFFFFF?text=?'} alt={`Photo of ${actorDetails.name}`}/></div><div className="sm:col-span-2 mt-4 sm:mt-0"><h2 className="text-3xl sm:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] mb-3 break-words">{actorDetails.name}</h2><p className="text-sm text-[var(--color-text-secondary)] leading-relaxed max-h-60 overflow-y-auto">{actorDetails.biography || "No biography available."}</p></div></div><div className="p-4 sm:p-6 bg-[var(--color-bg)]/50 border-t border-[var(--color-border)]"><h3 className="text-xl font-semibold text-[var(--color-accent-text)] mb-3">Known For</h3>{popularMedia?.length > 0 ? ( <div className="horizontal-scroll-container">{popularMedia.map(m => ( <button key={m.id} onClick={() => { close(); handleActorCreditClick(m); }} className="flex-shrink-0 w-32 text-center group hover:scale-105 transition-transform duration-150"><div className="w-full aspect-[2/3] bg-[var(--color-border)] rounded-lg overflow-hidden"><img loading="lazy" src={m.poster_path ? `${TMDB_IMAGE_BASE_URL}${m.poster_path}` : 'https://placehold.co/200x300/4A5568/FFFFFF?text=No+Poster'} alt={m.title || m.name} className="w-full h-full object-cover"/></div><span className="block w-full text-xs text-center text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors pt-2 truncate">{m.title || m.name}</span></button>))}</div> ) : <p className="text-sm text-[var(--color-text-secondary)]">No other popular media found.</p>}</div></div>)}</div></div> );
};
const MediaCardContent = ({ media, details, isFetching, t, userRegion, handleActorClick }) => { const displayDetails = isFetching ? {} : details; return ( <React.Fragment><div className="mt-4 sm:mt-6 space-y-3 sm:space-y-4 text-sm text-left"><div><strong className="text-[var(--color-accent-text)]">{t.cardYear}</strong> {media.year}</div>{isFetching ? <div className="inline-flex items-center"><div className="small-loader"></div></div> : media.mediaType === 'movie' && displayDetails.duration ? <div><strong className="text-[var(--color-accent-text)]">{t.cardDuration}</strong> {formatDuration(displayDetails.duration)}</div> : null}{isFetching ? <div className="inline-flex items-center"><div className="small-loader"></div></div> : media.mediaType === 'tv' && displayDetails.seasons ? <div><strong className="text-[var(--color-accent-text)]">{t.cardSeasons}</strong> {displayDetails.seasons}</div> : null}<div><strong className="text-[var(--color-accent-text)]">{t.cardRating}</strong> {media.imdbRating}/10 ‚≠ê</div>{isFetching ? null : (displayDetails.director || displayDetails.created_by?.length > 0) && <div><strong className="text-[var(--color-accent-text)]">{t.cardDirector}</strong> {displayDetails.director?.name || displayDetails.created_by?.map(c => c.name).join(', ')}</div>}<div><strong className="text-[var(--color-accent-text)]">{t.cardGenres}</strong> {media.genres.join(', ')}</div><div><strong className="text-[var(--color-accent-text)] block mb-1">{`${t.cardAvailableOn} ${userRegion}`}</strong>{isFetching ? <div className="small-loader"></div> : displayDetails.providers?.length > 0 ? (<div className="flex flex-wrap gap-2 items-center">{displayDetails.providers.map(p => ( <a key={p.provider_id} href={p.link} target="_blank" rel="noopener noreferrer" title={`Watch on ${p.provider_name}`}><img loading="lazy" src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} className="platform-logo"/></a>))}</div>) : <span className="text-[var(--color-text-secondary)]">{t.cardStreamingNotFound}</span>}</div>{isFetching ? null : displayDetails.rentalProviders?.length > 0 && (<div><strong className="text-[var(--color-accent-text)] block mb-1">{t.cardAvailableToRent}</strong><div className="flex flex-wrap gap-2 items-center">{displayDetails.rentalProviders.map(p => (<a key={p.provider_id} href={p.link} target="_blank" rel="noopener noreferrer" title={`Rent or buy on ${p.provider_name}`}><img loading="lazy" src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} className="platform-logo"/></a>))}</div></div>)}<div><strong className="text-[var(--color-accent-text)] block mb-1">{t.cardCast}</strong>{isFetching ? <div className="small-loader"></div> : displayDetails.cast?.length > 0 ? (<div className="horizontal-scroll-container">{displayDetails.cast.slice(0,10).map(actor => (<button key={actor.id} onClick={() => handleActorClick(actor.id)} className="flex-shrink-0 w-20 text-center group hover:scale-105 transition-transform"><img loading="lazy" src={actor.profile_path ? `${TMDB_PROFILE_IMAGE_BASE_URL}${actor.profile_path}`:'https://placehold.co/185x278/777/FFF?text=?'} alt={actor.name} className="actor-thumbnail mb-1"/><span className="text-xs text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors leading-tight">{actor.name}</span></button>))}</div>) : <span className="text-xs text-[var(--color-text-secondary)]">{t.cardCastNotFound}</span>}</div></div></React.Fragment> );};
const MemoizedMediaCardContent = React.memo(MediaCardContent);
const FilterModal = ({ isOpen, close, handleClearFilters, filters, handleFilterChange, handleGenreChangeInModal, genresMap, allPlatformOptions, platformSearchQuery, setPlatformSearchQuery, handlePlatformChange, t, personSearch, setPersonSearch, personSearchResults, handleSelectPerson, mediaType }) => { if (!isOpen) return null; const filteredPlatforms = allPlatformOptions.filter(p => p.name.toLowerCase().includes(platformSearchQuery.toLowerCase())); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.advancedFilters}</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 overflow-y-auto"><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.includeGenre}</label><div className="filter-checkbox-list space-y-2">{Object.entries(genresMap).sort(([, a], [, b]) => a.localeCompare(b)).map(([id, name]) => (<div key={`inc-${id}`} className="flex items-center"><input id={`inc-genre-${id}`} type="checkbox" checked={filters.genre.includes(id)} onChange={() => handleGenreChangeInModal(id, 'genre')} disabled={filters.excludeGenres.includes(id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-[var(--color-accent)] focus:ring-[var(--color-accent)] disabled:opacity-50"/><label htmlFor={`inc-genre-${id}`} className={`ml-3 text-base text-[var(--color-text-secondary)] ${filters.excludeGenres.includes(id) ? 'opacity-50' : ''}`}>{name}</label></div>))}</div></div><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.excludeGenre}</label><div className="filter-checkbox-list space-y-2">{Object.entries(genresMap).sort(([, a], [, b]) => a.localeCompare(b)).map(([id, name]) => (<div key={`ex-${id}`} className="flex items-center"><input id={`ex-genre-${id}`} type="checkbox" checked={filters.excludeGenres.includes(id)} onChange={() => handleGenreChangeInModal(id, 'excludeGenres')} disabled={filters.genre.includes(id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-red-600 focus:ring-red-500 accent-red-600 disabled:opacity-50"/><label htmlFor={`ex-genre-${id}`} className={`ml-3 text-base text-[var(--color-text-secondary)] ${filters.genre.includes(id) ? 'opacity-50' : ''}`}>{name}</label></div>))}</div></div><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.platform}</label><input type="text" value={platformSearchQuery} onChange={(e) => setPlatformSearchQuery(e.target.value)} placeholder={t.platformSearchPlaceholder} className="w-full p-2 mb-3 bg-[var(--color-bg)] border border-[var(--color-border)] rounded-md text-sm" /><div className="filter-checkbox-list space-y-2">{filteredPlatforms.map(p => (<div key={`modal-p-${p.id}`} className="flex items-center"><input id={`modal-platform-${p.id}`} type="checkbox" checked={filters.platform.includes(p.id)} onChange={() => handlePlatformChange(p.id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-[var(--color-accent)] focus:ring-[var(--color-accent)]"/><label htmlFor={`modal-platform-${p.id}`} className="ml-3 text-base text-[var(--color-text-secondary)]">{p.name}</label></div>))}</div></div></div><div className="p-4 mt-auto border-t border-[var(--color-border)] flex justify-end items-center gap-4"><button onClick={()=>{handleClearFilters(); close();}} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">{t.clearFilters}</button><button onClick={close} className="px-6 py-2 bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] text-white font-bold rounded-lg shadow-lg">{t.applyFilters}</button></div></div></div> ); };
const SkeletonMediaCard = () => ( <div className="w-full max-w-4xl mx-auto bg-[var(--color-card-bg)] rounded-xl shadow-2xl overflow-hidden mb-10 border border-[var(--color-border)] animate-pulse"><div className="sm:grid sm:grid-cols-3 sm:gap-x-8"><div className="sm:col-span-1 p-6"><div className="w-full h-auto mx-auto aspect-[2/3] bg-gray-700 rounded-lg"></div></div><div className="sm:col-span-2 p-6 space-y-4"><div className="h-8 bg-gray-700 rounded w-3/4"></div><div className="space-y-3 mt-4"><div className="h-4 bg-gray-700 rounded w-full"></div><div className="h-4 bg-gray-700 rounded w-full"></div><div className="h-4 bg-gray-700 rounded w-5/6"></div></div></div></div></div>);
const SimilarMediaModal = ({ media, close, t, fetchFullMediaDetails, handleActorClick, userRegion, handleSimilarMediaClick }) => { if (!media) return null; const [details, setDetails] = useState(media); const [isFetching, setIsFetching] = useState(true); useEffect(() => { setIsFetching(true); setDetails({}); fetchFullMediaDetails(media.id, media.mediaType).then(d => { if (d) setDetails(d); }).finally(() => setIsFetching(false)); }, [media.id, media.mediaType]); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={e=>e.stopPropagation()}><button onClick={close} className="absolute top-3 right-3 text-white bg-gray-900 rounded-full p-1 hover:bg-gray-700 z-10"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button>{isFetching || !details.id ? ( <div className="h-96 flex items-center justify-center"><div className="loader"></div></div> ) : ( <div className="overflow-y-auto"><div className="sm:grid sm:grid-cols-3 sm:gap-x-8"><div className="sm:col-span-1 p-4 sm:p-6"><img loading="lazy" className="h-auto w-3/4 sm:w-full mx-auto object-cover rounded-lg shadow-lg" src={details.poster_path ? `${TMDB_IMAGE_BASE_URL}${details.poster_path}` : 'https://placehold.co/500x750/1f2937/FFFFFF?text=No+Image'} alt={`Poster for ${details.title || details.name}`}/></div> <div className="sm:col-span-2 p-4 sm:p-6 sm:pl-0"><div className="text-center sm:text-left"><h2 className="text-3xl sm:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] mb-3 break-words">{details.title || details.name}</h2><p className="mt-2 text-[var(--color-text-secondary)] text-base leading-relaxed break-words">{details.overview}</p></div><div className="mt-6 pt-4 border-t border-[var(--color-border)]"><h3 className="text-lg font-semibold text-[var(--color-accent-text)] mb-2">{t.details}</h3><MemoizedMediaCardContent media={media} details={details} isFetching={isFetching} t={t} userRegion={userRegion} handleActorClick={handleActorClick}/></div></div></div> <div className="p-4 sm:p-6 bg-[var(--color-bg)]/50 border-t border-[var(--color-border)]"><h3 className="text-xl font-semibold text-[var(--color-accent-text)] mb-3">{t.cardSimilarMovies}</h3>{isFetching ? <div className="flex justify-center"><div className="small-loader"></div></div> : details.similar?.length > 0 ? (<div className="horizontal-scroll-container">{details.similar.map(m => (<button key={m.id} onClick={() => handleSimilarMediaClick(m)} className="flex-shrink-0 w-32 text-center group hover:scale-105 transition-transform duration-150"><div className="w-full aspect-[2/3] bg-[var(--color-border)] rounded-lg overflow-hidden"><img loading="lazy" src={m.poster ? `${TMDB_IMAGE_BASE_URL}${m.poster}` : 'https://placehold.co/200x300/4A5568/FFFFFF?text=N/A'} alt={m.title} className="w-full h-full object-cover"/></div><span className="block w-full text-xs text-center text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors pt-2 truncate">{m.title}</span></button>))}</div>) : <p className="text-sm text-[var(--color-text-secondary)] text-sm">{t.noMoviesFound}</p>}</div></div> )}</div></div> );};
const TrailerModal = ({ isOpen, close, trailerKey }) => {
    if (!isOpen || !trailerKey) return null;
    const youtubeSrc = `https://www.youtube.com/embed/${trailerKey}?autoplay=1`;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}>
            <div className="bg-black rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col shadow-2xl" onClick={(e) => e.stopPropagation()}>
                <div className="trailer-responsive">
                    <iframe
                        src={youtubeSrc}
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                        title="Embedded youtube"
                    />
                </div>
            </div>
        </div>
    );
};