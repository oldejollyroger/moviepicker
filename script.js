const { useState, useEffect, useCallback, useMemo, useRef } = React;

const TMDB_BASE_URL = 'https://api.themoviedb.org/3';
const TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';
const TMDB_PROFILE_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w185';
const TMDB_THUMBNAIL_BASE_URL = 'https://image.tmdb.org/t/p/w92';

const CURATED_COUNTRY_LIST = new Set([ 'AR', 'AU', 'AT', 'BE', 'BR', 'CA', 'CL', 'CO', 'CZ', 'DK', 'EG', 'FI', 'FR', 'DE', 'GR', 'HK', 'HU', 'IN', 'ID', 'IE', 'IL', 'IT', 'JP', 'MY', 'MX', 'NL', 'NZ', 'NG', 'NO', 'PE', 'PH', 'PL', 'PT', 'RO', 'RU', 'SA', 'SG', 'ZA', 'KR', 'ES', 'SE', 'CH', 'TW', 'TH', 'TR', 'AE', 'GB', 'US' ]);
const ACCENT_COLORS = [ { name: 'Cyberpunk', color: '#d946ef', text: '#f0abfc', from: '#22d3ee', to: '#d946ef' }, { name: 'Ocean', color: '#22d3ee', text: '#67e8f9', from: '#22d3ee', to: '#3b82f6' }, { name: 'Forest', color: '#22c55e', text: '#4ade80', from: '#4ade80', to: '#a3e635' }, { name: 'Volcano', color: '#dc2626', text: '#f87171', from: '#f97316', to: '#ef4444' }, { name: 'Sunset', color: '#f97316', text: '#fbbf24', from: '#fb923c', to: '#f59e0b' }, ];

const translations = {
    es: { movies: 'Películas', tvShows: 'Series', settings: "Ajustes", watchedList: "Vistos", unwatch: "Quitar", watchList: "Mi Lista", saveForLater: "Guardar", removeFromList: "Quitar", installApp: "Instalar App", installInstructions: "Para instalar, presiona el ícono de Compartir y luego 'Agregar a la pantalla de inicio'", title: 'Movie & TV Randomizer', subtitle: '¿Qué vemos esta noche?', platforms: "Plataformas", advancedFilters: 'Filtros Avanzados', clearFilters: 'Limpiar Filtros', showFilters: 'Más Filtros', hideFilters: 'Ocultar Filtros', applyFilters: 'Aplicar Filtros', region: 'País:', selectRegionPrompt: 'Por favor, selecciona tu país para empezar', platform: 'Plataformas (Opcional):', platformSearchPlaceholder: 'Buscar plataforma...', includeGenre: 'Incluir Géneros:', excludeGenre: 'Excluir Géneros:', decade: 'Década:', allDecades: 'Cualquiera', minRating: 'Calificación Mínima:', surpriseMe: '¡Sorpréndeme!', goBack: 'Atrás', searching: 'Buscando...', searchPlaceholder: 'O busca una película o serie...', welcomeMessage: "¡Ajusta los filtros y haz clic en '¡Sorpréndeme!' para empezar!", noMoviesFound: 'No se encontraron resultados con los filtros actuales.', cardYear: 'Año:', cardDuration: 'Duración:', cardSeasons: "Temporadas:", cardRating: 'Nota TMDb:', cardDirector: 'Director/Creador:', cardGenres: 'Géneros:', cardAvailableOn: 'Disponible en (Suscripción):', cardAvailableToRent: 'Disponible para Alquilar/Comprar:', cardStreamingNotFound: 'No encontrado en streaming.', cardCast: 'Reparto Principal:', cardCastNotFound: 'Reparto no disponible.', cardMarkAsWatched: "Marcar como Visto", cardIsWatched: "Visto ✔️", cardTrailer: 'Ver Tráiler', cardTrailerNotFound: 'Tráiler no disponible.', cardSimilarMovies: 'Títulos Similares', footer: 'Datos cortesía de', shareButton: 'Compartir', shareSuccess: '¡Enlace copiado!', clearAllFilters: 'Limpiar todos los filtros', details: "Details" },
    en: { movies: "Movies", tvShows: "TV Shows", settings: "Settings", watchedList: "Watched List", unwatch: "Un-watch", watchList: "My List", saveForLater: "Save for Later", removeFromList: "Remove", installApp: "Install App", installInstructions: "To install, tap the Share icon and then 'Add to Home Screen'", title: 'Movie & TV Randomizer', subtitle: "What should we watch tonight?", platforms: "Platforms", advancedFilters: 'Advanced Filters', clearFilters: 'Clear Filters', showFilters: 'More Filters', hideFilters: 'Hide Filters', applyFilters: 'Apply Filters', region: 'Country:', selectRegionPrompt: 'Please select your country to begin', platform: 'Platforms (Optional):', platformSearchPlaceholder: 'Search platform...', includeGenre: 'Include Genres:', excludeGenre: 'Exclude Genres:', decade: 'Decade:', allDecades: 'Any', minRating: 'Minimum Rating:', surpriseMe: 'Surprise Me!', goBack: 'Back', searching: 'Searching...', searchPlaceholder: 'Or search for a movie or TV show...', welcomeMessage: "Adjust the filters and click 'Surprise Me!' to start!", noMoviesFound: 'No results found with the current filters. Try changing them!', cardYear: 'Year:', cardDuration: 'Duration:', cardSeasons: 'Seasons:', cardRating: 'TMDb Rating:', cardDirector: 'Director/Creator:', cardGenres: 'Genres:', cardAvailableOn: 'Available on (Subscription):', cardAvailableToRent: 'Available for Rent or Buy:', cardStreamingNotFound: 'Not found on streaming.', cardCast: 'Main Cast:', cardCastNotFound: 'Cast not available.', cardMarkAsWatched: "Mark as Watched", cardIsWatched: "Watched ✔️", cardTrailer: 'Watch Trailer', cardTrailerNotFound: 'Trailer not available.', cardSimilarMovies: 'Similar Titles', footer: 'Movie data courtesy of', shareButton: 'Share', shareSuccess: 'Link Copied!', clearAllFilters: 'Clear All Filters', details: "Details" }
};

// --- HELPER FUNCTIONS & HOOKS (RESTORED) ---
const formatDuration = (totalMinutes) => { if (!totalMinutes || totalMinutes <= 0) return null; const hours = Math.floor(totalMinutes / 60); const minutes = totalMinutes % 60; return `${hours}h ${minutes}min`; };
const useLocalStorageState = (key, defaultValue) => { const [state, setState] = useState(() => { const storedValue = localStorage.getItem(key); if (storedValue) { try { return JSON.parse(storedValue); } catch (e) { return defaultValue; } } return typeof defaultValue === 'function' ? defaultValue() : defaultValue; }); useEffect(() => { try { localStorage.setItem(key, JSON.stringify(state)); } catch (e) { console.error(`Error setting localStorage key "${key}":`, e); } }, [key, state]); return [state, setState]; };
const useDebounce = (value, delay) => { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; };

const normalizeMediaData = (media, mediaType, genresMap) => {
    if (!media || !media.id) return null;
    const isMovie = mediaType === 'movie';
    const releaseDate = isMovie ? media.release_date : media.first_air_date;
    return { id: media.id.toString(), title: isMovie ? media.title : media.name, synopsis: media.overview, year: releaseDate ? parseInt(releaseDate.split('-')[0]) : null, imdbRating: media.vote_average?.toFixed(1) || 'N/A', genres: media.genre_ids?.map(id => genresMap[id]).filter(Boolean) || [], poster: media.poster_path, mediaType };
};

// --- COMPONENTS (Restored) ---
const InstallPwaInstructions = ({ t }) => ( <div className="install-button-wrapper"><div className="bg-gray-800 text-white text-center text-sm p-3 rounded-lg shadow-lg flex items-center gap-3"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg><span>{t.installInstructions}</span></div></div> );
const InstallPwaButton = ({ t, handleInstallClick }) => ( <div className="install-button-wrapper"><button onClick={handleInstallClick} className="bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] text-white font-bold py-3 px-6 rounded-full shadow-lg flex items-center gap-3 hover:scale-105 transition-transform"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>{t.installApp}</button></div> );
const SettingsDropdown = ({ mode, setMode, accent, setAccent, language, setLanguage, t, openWatchedModal, openWatchlistModal }) => { const [isOpen, setIsOpen] = useState(false); const dropdownRef = useRef(null); useEffect(() => { const handleClickOutside = (event) => { if (dropdownRef.current && !dropdownRef.current.contains(event.target)) setIsOpen(false); }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, []); return ( <div className="relative" ref={dropdownRef}><button onClick={() => setIsOpen(!isOpen)} className="p-2 rounded-full bg-[var(--color-card-bg)] shadow border border-[var(--color-border)] hover:bg-[var(--color-border)]" aria-label="Settings"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z"/><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/></svg></button>{isOpen && ( <div className="absolute right-0 mt-2 w-64 bg-[var(--color-card-bg)] rounded-xl shadow-2xl border border-[var(--color-border)] z-30"><div className="p-4"><h3 className="font-semibold mb-3">{t.settings}</h3><div className="space-y-4"><div className="flex items-center justify-center gap-2 bg-[var(--color-bg)] p-2 rounded-full overflow-hidden">{ACCENT_COLORS.map(c => (<button key={c.name} onClick={() => setAccent(c)} className={`w-6 h-6 rounded-full transition-transform duration-150 ${accent.name === c.name ? 'scale-125 ring-2 ring-offset-2 ring-offset-[var(--color-bg)] ring-[var(--color-accent)]' : ''}`} style={{backgroundColor: c.color}} title={c.name}></button>))}</div><div className="flex items-center gap-2 bg-[var(--color-bg)] p-1 rounded-full"><button onClick={() => setMode('light')} className={`w-full p-1.5 rounded-full flex justify-center items-center gap-2 ${mode === 'light' ? 'bg-[var(--color-accent)] text-white' : 'text-[var(--color-text-secondary)]'}`}><svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/></svg>Light</button><button onClick={() => setMode('dark')} className={`w-full p-1.5 rounded-full flex justify-center items-center gap-2 ${mode === 'dark' ? 'bg-[var(--color-accent)] text-white' : 'text-[var(--color-text-secondary)]'}`}><svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/></svg>Dark</button></div><div className="flex items-center bg-[var(--color-bg)] p-1 rounded-full"><button onClick={() => setLanguage('es')} className={`w-full lang-btn ${language === 'es' ? 'lang-btn-active' : 'lang-btn-inactive'}`}>Español</button><button onClick={() => setLanguage('en')} className={`w-full lang-btn ${language === 'en' ? 'lang-btn-active' : 'lang-btn-inactive'}`}>English</button></div><button onClick={()=>{setIsOpen(false); openWatchlistModal();}} className="w-full p-2 text-sm text-left bg-[var(--color-bg)] rounded-lg hover:bg-[var(--color-border)] transition-colors flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-3.13L5 18V4z"/></svg>{t.watchList}</button><button onClick={()=>{setIsOpen(false); openWatchedModal();}} className="w-full p-2 text-sm text-left bg-[var(--color-bg)] rounded-lg hover:bg-[var(--color-border)] transition-colors flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/><path fillRule="evenodd" d="M.458 10C3.732 4.943 9.522 3 10 3s6.268 1.943 9.542 7c-3.274 5.057-9.064 7-9.542 7S3.732 15.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/></svg>{t.watchedList}</button></div></div></div>)}</div> );};
const WatchedMediaModal = ({ isOpen, close, watchedMedia, handleUnwatchMedia, mediaType, t }) => { if (!isOpen) return null; const watchedArray = Object.values(watchedMedia).filter(m => m.mediaType === mediaType); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.watchedList} ({mediaType === 'movie' ? t.movies : t.tvShows})</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 overflow-y-auto space-y-4">{watchedArray.length > 0 ? ( watchedArray.map((media) => (<div key={media.id} className="user-list-item"><img src={media.poster ? `${TMDB_THUMBNAIL_BASE_URL}${media.poster}` : 'https://placehold.co/92x138/4A5568/FFFFFF?text=?'} alt={media.title}/><div className="user-list-item-info"><div className="user-list-item-title">{media.title}</div><div className="user-list-item-year">{media.year}</div></div><button onClick={() => handleUnwatchMedia(media.id)} className="text-xs bg-red-600 text-white font-bold py-1 px-3 rounded-full hover:bg-red-700 transition-colors flex-shrink-0">{t.unwatch}</button></div>)) ) : (<p className="text-gray-400">Your watched list is empty for {mediaType === 'movie' ? t.movies.toLowerCase() : t.tvShows.toLowerCase()}.</p>)}</div><div className="p-4 mt-auto border-t border-[var(--color-border)] text-right"><button onClick={close} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">Close</button></div></div></div> ); };
const WatchlistModal = ({ isOpen, close, watchlist, handleToggleWatchlist, mediaType, t }) => { if (!isOpen) return null; const watchlistArray = Object.values(watchlist).filter(m => m.mediaType === mediaType); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.watchList} ({mediaType === 'movie' ? t.movies : t.tvShows})</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 overflow-y-auto space-y-4">{watchlistArray.length > 0 ? (watchlistArray.map((media) => (<div key={media.id} className="user-list-item"><img src={media.poster ? `${TMDB_THUMBNAIL_BASE_URL}${media.poster}` : 'https://placehold.co/92x138/4A5568/FFFFFF?text=?'} alt={media.title}/><div className="user-list-item-info"><div className="user-list-item-title">{media.title}</div><div className="user-list-item-year">{media.year}</div></div><button onClick={() => handleToggleWatchlist(media)} className="text-xs bg-gray-600 text-white font-bold py-1 px-3 rounded-full hover:bg-gray-700 transition-colors flex-shrink-0">{t.removeFromList}</button></div>))) : (<p className="text-gray-400">Your watchlist is empty for {mediaType === 'movie' ? t.movies.toLowerCase() : t.tvShows.toLowerCase()}.</p>)}</div><div className="p-4 mt-auto border-t border-[var(--color-border)] text-right"><button onClick={close} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">Close</button></div></div></div> );};
const ActorDetailsModal = ({ isOpen, close, actorDetails, isFetching, handleSimilarMediaClick, t }) => { if (!isOpen) return null; const popularMedia = (actorDetails?.movie_credits?.cast || []).concat(actorDetails?.tv_credits?.cast || []).filter(m => m.vote_count > 100 && m.poster_path).sort((a,b)=>b.popularity - a.popularity).slice(0, 10); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><button onClick={close} className="absolute top-3 right-3 text-white bg-gray-900 rounded-full p-1 hover:bg-gray-700 z-10"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button>{isFetching || !actorDetails ? (<div className="h-96 flex items-center justify-center"><div className="loader"></div></div>) : (<div className="overflow-y-auto"><div className="sm:grid sm:grid-cols-3 sm:gap-x-8 p-6"><div className="sm:col-span-1"><img loading="lazy" className="h-auto w-3/4 sm:w-full mx-auto object-cover rounded-lg shadow-lg" src={actorDetails.profile_path ? `${TMDB_IMAGE_BASE_URL}${actorDetails.profile_path}` : 'https://placehold.co/500x750/4A5568/FFFFFF?text=?'} alt={`Photo of ${actorDetails.name}`}/></div><div className="sm:col-span-2 mt-4 sm:mt-0"><h2 className="text-3xl sm:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] mb-3 break-words">{actorDetails.name}</h2><p className="text-sm text-[var(--color-text-secondary)] leading-relaxed max-h-60 overflow-y-auto">{actorDetails.biography || "No biography available."}</p></div></div><div className="p-4 sm:p-6 bg-[var(--color-bg)]/50 border-t border-[var(--color-border)]"><h3 className="text-xl font-semibold text-[var(--color-accent-text)] mb-3">Known For</h3>{popularMedia?.length > 0 ? ( <div className="horizontal-scroll-container">{popularMedia.map(m => ( <button key={m.id} onClick={() => { close(); handleSimilarMediaClick(m); }} className="flex-shrink-0 w-32 text-center group hover:scale-105 transition-transform duration-150"><div className="w-full aspect-[2/3] bg-[var(--color-border)] rounded-lg overflow-hidden"><img loading="lazy" src={m.poster_path ? `${TMDB_IMAGE_BASE_URL}${m.poster_path}` : 'https://placehold.co/200x300/4A5568/FFFFFF?text=No+Poster'} alt={m.title || m.name} className="w-full h-full object-cover"/></div><span className="block w-full text-xs text-center text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors pt-2 truncate">{m.title || m.name}</span></button>))}</div> ) : <p className="text-sm text-[var(--color-text-secondary)]">No other popular media found.</p>}</div></div>)}</div></div> );};
const MediaCardContent = ({ media, details, isFetching, t, userRegion, handleActorClick }) => { const displayDetails = isFetching ? {} : details; return ( <React.Fragment><div className="mt-4 sm:mt-6 space-y-3 sm:space-y-4 text-sm text-left"><div><strong className="text-[var(--color-accent-text)]">{t.cardYear}</strong> {media.year}</div>{isFetching ? <div className="inline-flex items-center"><div className="small-loader"></div></div> : media.mediaType === 'movie' && displayDetails.duration ? <div><strong className="text-[var(--color-accent-text)]">{t.cardDuration}</strong> {formatDuration(displayDetails.duration)}</div> : null}{isFetching ? <div className="inline-flex items-center"><div className="small-loader"></div></div> : media.mediaType === 'tv' && displayDetails.seasons ? <div><strong className="text-[var(--color-accent-text)]">{t.cardSeasons}</strong> {displayDetails.seasons}</div> : null}<div><strong className="text-[var(--color-accent-text)]">{t.cardRating}</strong> {media.imdbRating}/10 ⭐</div>{isFetching ? null : (displayDetails.director || displayDetails.created_by?.length > 0) && <div><strong className="text-[var(--color-accent-text)]">{t.cardDirector}</strong> {displayDetails.director?.name || displayDetails.created_by?.map(c => c.name).join(', ')}</div>}<div><strong className="text-[var(--color-accent-text)]">{t.cardGenres}</strong> {media.genres.join(', ')}</div><div><strong className="text-[var(--color-accent-text)] block mb-1">{`${t.cardAvailableOn} ${userRegion}`}</strong>{isFetching ? <div className="small-loader"></div> : displayDetails.providers?.length > 0 ? (<div className="flex flex-wrap gap-2 items-center">{displayDetails.providers.map(p => ( <a key={p.provider_id} href={p.link} target="_blank" rel="noopener noreferrer" title={`Watch on ${p.provider_name}`}><img loading="lazy" src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} className="platform-logo"/></a>))}</div>) : <span className="text-[var(--color-text-secondary)]">{t.cardStreamingNotFound}</span>}</div>{isFetching ? null : displayDetails.rentalProviders?.length > 0 && (<div><strong className="text-[var(--color-accent-text)] block mb-1">{t.cardAvailableToRent}</strong><div className="flex flex-wrap gap-2 items-center">{displayDetails.rentalProviders.map(p => (<a key={p.provider_id} href={p.link} target="_blank" rel="noopener noreferrer" title={`Rent or buy on ${p.provider_name}`}><img loading="lazy" src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} className="platform-logo"/></a>))}</div></div>)}<div><strong className="text-[var(--color-accent-text)] block mb-1">{t.cardCast}</strong>{isFetching ? <div className="small-loader"></div> : displayDetails.cast?.length > 0 ? (<div className="horizontal-scroll-container">{displayDetails.cast.slice(0,10).map(actor => (<button key={actor.id} onClick={() => handleActorClick(actor.id)} className="flex-shrink-0 w-20 text-center group hover:scale-105 transition-transform"><img loading="lazy" src={actor.profile_path ? `${TMDB_PROFILE_IMAGE_BASE_URL}${actor.profile_path}`:'https://placehold.co/185x278/777/FFF?text=?'} alt={actor.name} className="actor-thumbnail mb-1"/><span className="text-xs text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors leading-tight">{actor.name}</span></button>))}</div>) : <span className="text-xs text-[var(--color-text-secondary)]">{t.cardCastNotFound}</span>}</div></div></React.Fragment> );};
const FilterModal = ({ isOpen, close, handleClearFilters, filters, handleGenreChangeInModal, genresMap, allPlatformOptions, platformSearchQuery, setPlatformSearchQuery, handlePlatformChange, t }) => { if (!isOpen) return null; const filteredPlatforms = allPlatformOptions.filter(p => p.name.toLowerCase().includes(platformSearchQuery.toLowerCase())); return ( <div className="fixed inset-0 bg-black bg-opacity-80 flex justify-center items-center z-50 p-4" onClick={close}><div className="bg-[var(--color-card-bg)] rounded-xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-[var(--color-border)] shadow-2xl" onClick={(e) => e.stopPropagation()}><div className="p-6 border-b border-[var(--color-border)] flex justify-between items-center"><h2 className="text-2xl font-semibold text-[var(--color-accent-text)]">{t.advancedFilters}</h2><button onClick={close} className="text-gray-400 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button></div><div className="p-6 grid grid-cols-1 md:grid-cols-3 gap-8 overflow-y-auto"><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.includeGenre}</label><div className="filter-checkbox-list space-y-2">{Object.entries(genresMap).sort(([, a], [, b]) => a.localeCompare(b)).map(([id, name]) => (<div key={`inc-${id}`} className="flex items-center"><input id={`inc-genre-${id}`} type="checkbox" checked={filters.genre.includes(id)} onChange={() => handleGenreChangeInModal(id, 'genre')} disabled={filters.excludeGenres.includes(id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-[var(--color-accent)] focus:ring-[var(--color-accent)] disabled:opacity-50"/><label htmlFor={`inc-genre-${id}`} className={`ml-3 text-base text-[var(--color-text-secondary)] ${filters.excludeGenres.includes(id) ? 'opacity-50' : ''}`}>{name}</label></div>))}</div></div><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.excludeGenre}</label><div className="filter-checkbox-list space-y-2">{Object.entries(genresMap).sort(([, a], [, b]) => a.localeCompare(b)).map(([id, name]) => (<div key={`ex-${id}`} className="flex items-center"><input id={`ex-genre-${id}`} type="checkbox" checked={filters.excludeGenres.includes(id)} onChange={() => handleGenreChangeInModal(id, 'excludeGenres')} disabled={filters.genre.includes(id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-red-600 focus:ring-red-500 accent-red-600 disabled:opacity-50"/><label htmlFor={`ex-genre-${id}`} className={`ml-3 text-base text-[var(--color-text-secondary)] ${filters.genre.includes(id) ? 'opacity-50' : ''}`}>{name}</label></div>))}</div></div><div><label className="block text-lg font-medium text-[var(--color-text-primary)] mb-3">{t.platform}</label><input type="text" value={platformSearchQuery} onChange={(e) => setPlatformSearchQuery(e.target.value)} placeholder={t.platformSearchPlaceholder} className="w-full p-2 mb-3 bg-[var(--color-bg)] border border-[var(--color-border)] rounded-md text-sm" /><div className="filter-checkbox-list space-y-2">{filteredPlatforms.map(p => (<div key={`modal-p-${p.id}`} className="flex items-center"><input id={`modal-platform-${p.id}`} type="checkbox" checked={filters.platform.includes(p.id)} onChange={() => handlePlatformChange(p.id)} className="h-4 w-4 rounded border-gray-500 bg-gray-600 text-[var(--color-accent)] focus:ring-[var(--color-accent)]"/><label htmlFor={`modal-platform-${p.id}`} className="ml-3 text-base text-[var(--color-text-secondary)]">{p.name}</label></div>))}</div></div></div><div className="p-4 mt-auto border-t border-[var(--color-border)] flex justify-end items-center gap-4"><button onClick={()=>{handleClearFilters(); close();}} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg shadow-lg hover:bg-gray-500">{t.clearFilters}</button><button onClick={close} className="px-6 py-2 bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] text-white font-bold rounded-lg shadow-lg">{t.applyFilters}</button></div></div></div> ); };
const SkeletonMediaCard = () => ( <div className="w-full max-w-4xl mx-auto bg-[var(--color-card-bg)] rounded-xl shadow-2xl overflow-hidden mb-10 border border-[var(--color-border)] animate-pulse"><div className="sm:grid sm:grid-cols-3 sm:gap-x-8"><div className="sm:col-span-1 p-6"><div className="w-full h-auto mx-auto aspect-[2/3] bg-gray-700 rounded-lg"></div></div><div className="sm:col-span-2 p-6 space-y-4"><div className="h-8 bg-gray-700 rounded w-3/4"></div><div className="space-y-3 mt-4"><div className="h-4 bg-gray-700 rounded w-full"></div><div className="h-4 bg-gray-700 rounded w-full"></div><div className="h-4 bg-gray-700 rounded w-5/6"></div></div></div></div></div>);

const App = () => {
    // --- State ---
    const [mode, setMode] = useState(() => localStorage.getItem('movieRandomizerMode') || 'dark');
    const [accent, setAccent] = useState(() => { const s = localStorage.getItem('movieRandomizerAccent'); try { return s ? JSON.parse(s) : ACCENT_COLORS[0]; } catch { return ACCENT_COLORS[0]; }});
    const [language, setLanguage] = useState(() => localStorage.getItem('movieRandomizerLang') || 'en');
    const [userRegion, setUserRegion] = useState(() => localStorage.getItem('movieRandomizerRegion') || null);
    const [mediaType, setMediaType] = useState('movie'); // 'movie' or 'tv'
    
    const [allMedia, setAllMedia] = useState([]);
    const [selectedMedia, setSelectedMedia] = useState(null);
    const [mediaHistory, setMediaHistory] = useState([]);
    const [mediaDetails, setMediaDetails] = useState({});
    
    const [watchedMedia, setWatchedMedia] = useState({});
    const [watchList, setWatchList] = useState({});
    const WATCHED_MEDIA_KEY = 'watchedUserMedia_v2';
    const WATCHLIST_KEY = 'mediaPickerWatchlist_v2';
    
    const initialFilters = { genre: [], excludeGenres: [], decade: 'todos', platform: [], minRating: 0 };
    const [filters, setFilters] = useState(() => { const s = localStorage.getItem('movieRandomizerFilters_v2'); if (s) { try { return { ...initialFilters, ...JSON.parse(s) }; } catch (e) { return initialFilters; } } return initialFilters; });
    
    const [shareStatus, setShareStatus] = useState('idle'); 
    const [availableRegions, setAvailableRegions] = useState([]);
    const [quickPlatformOptions, setQuickPlatformOptions] = useState([]);
    const [allPlatformOptions, setAllPlatformOptions] = useState([]);
    const [platformSearchQuery, setPlatformSearchQuery] = useState('');
    const [isFetchingDetails, setIsFetchingDetails] = useState(false);
    const [modalMedia, setModalMedia] = useState(null);
    const [isFetchingModalDetails, setIsFetchingModalDetails] = useState(false);
    const [isTrailerModalOpen, setIsTrailerModalOpen] = useState(false);
    const [isFilterModalOpen, setIsFilterModalOpen] = useState(false);
    const [isWatchedModalOpen, setIsWatchedModalOpen] = useState(false);
    const [isWatchlistModalOpen, setIsWatchlistModalOpen] = useState(false);
    const [actorDetails, setActorDetails] = useState(null);
    const [isActorModalOpen, setIsActorModalOpen] = useState(false);
    const [isFetchingActorDetails, setIsFetchingActorDetails] = useState(false);
    const [installPrompt, setInstallPrompt] = useState(null);
    const [isIos, setIsIos] = useState(false);
    const [isStandalone, setIsStandalone] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [isDiscovering, setIsDiscovering] = useState(false);
    const [error, setError] = useState(null);
    const [genresMap, setGenresMap] = useState({});
    const [searchQuery, setSearchQuery] = useState('');
    const debouncedSearchQuery = useDebounce(searchQuery, 300);
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [hasSearched, setHasSearched] = useState(false);
    const cardRef = useRef(null);
    const searchRef = useRef(null);
    const t = translations[language];

    // --- Core Functions ---
    const fetchApi = useCallback(async (path, query) => { if (typeof TMDB_API_KEY === 'undefined' || !TMDB_API_KEY) { throw new Error("API Key is missing."); } const params = new URLSearchParams(query); const url = `${TMDB_BASE_URL}/${path}?api_key=${TMDB_API_KEY}&${params.toString()}`; const response = await fetch(url); if (!response.ok) { const err = await response.json(); throw new Error(err.status_message || `API error: ${response.status}`); } return response.json(); }, []);
    const resetAllState = useCallback(() => { setAllMedia([]); setSelectedMedia(null); setHasSearched(false); setMediaHistory([]); }, []);
    const resetAndClearFilters = () => { resetAllState(); setFilters(initialFilters); };

    // --- Effects ---
    useEffect(() => { document.documentElement.classList.toggle('light-mode', mode === 'light'); localStorage.setItem('movieRandomizerMode', mode); }, [mode]);
    useEffect(() => { const r = document.documentElement; r.style.setProperty('--color-accent', accent.color); r.style.setProperty('--color-accent-text', accent.text); r.style.setProperty('--color-accent-gradient-from', accent.from); r.style.setProperty('--color-accent-gradient-to', accent.to); localStorage.setItem('movieRandomizerAccent', JSON.stringify(accent)); }, [accent]);
    useEffect(() => { localStorage.setItem('movieRandomizerLang', language); resetAllState(); }, [language]);
    useEffect(() => { if (userRegion) localStorage.setItem('movieRandomizerRegion', userRegion); }, [userRegion]);
    useEffect(() => { localStorage.setItem('movieRandomizerFilters_v2', JSON.stringify(filters)); }, [filters]);
    useEffect(() => { const i = /iPhone|iPad|iPod/.test(navigator.userAgent) && !window.MSStream; setIsIos(i); if (window.matchMedia?.('(display-mode: standalone)').matches) setIsStandalone(true); const p = (e) => { e.preventDefault(); setInstallPrompt(e); }; window.addEventListener('beforeinstallprompt', p); return () => window.removeEventListener('beforeinstallprompt', p);}, []);

    const closeModal = () => { setIsTrailerModalOpen(false); setIsActorModalOpen(false); setModalMedia(null); setIsWatchedModalOpen(false); setIsWatchlistModalOpen(false); setIsFilterModalOpen(false); };
    useEffect(() => { const handleKeyDown = (event) => { if (event.key === 'Escape') closeModal(); }; window.addEventListener('keydown', handleKeyDown); return () => window.removeEventListener('keydown', handleKeyDown); }, []);

    useEffect(() => { const bootstrapApp = async () => { setIsLoading(true); setError(null); if (typeof TMDB_API_KEY === 'undefined' || !TMDB_API_KEY) { setError("TMDb API Key not found."); setIsLoading(false); return; } try { const regionsData = await fetchApi('configuration/countries', {}); setAvailableRegions(regionsData.filter(r => CURATED_COUNTRY_LIST.has(r.iso_3166_1)).sort((a,b)=>a.english_name.localeCompare(b.english_name))); } catch (err) { console.error("Error bootstrapping:", err); setError(err.message); } finally { setIsLoading(false); } }; bootstrapApp(); }, [fetchApi]);
    useEffect(() => { const fetchLanguageData = async () => { if (!language) return; try { const l = language === 'es' ? 'es-ES' : 'en-US'; const d = await fetchApi(`genre/${mediaType}/list`, { language: l }); setGenresMap(d.genres.reduce((a, g) => ({ ...a, [g.id]: g.name }), {})); } catch (e) { console.error("Error fetching language data:", e); } }; fetchLanguageData(); }, [language, mediaType, fetchApi]);
    useEffect(() => { if (!userRegion) return; const fetchPlatforms = async () => { try { const data = await fetchApi(`watch/providers/${mediaType}`, { watch_region: userRegion }); const sorted = data.results.sort((a, b) => (a.display_priorities?.[userRegion] ?? 100) - (b.display_priorities?.[userRegion] ?? 100)); setQuickPlatformOptions(sorted.slice(0, 6).map(p => ({ id: p.provider_id.toString(), name: p.provider_name }))); setAllPlatformOptions(sorted.map(p => ({ id: p.provider_id.toString(), name: p.provider_name }))); } catch (err) { console.error("Error fetching providers", err); }}; fetchPlatforms();}, [userRegion, mediaType, fetchApi]);
    useEffect(() => { if (debouncedSearchQuery.trim() === '') { setSearchResults([]); return; } setIsSearching(true); const search = async () => { try { const data = await fetchApi(`search/${mediaType}`, { query: debouncedSearchQuery, language: language === 'es' ? 'es-ES' : 'en-US' }); setSearchResults(data.results.map(m => normalizeMediaData(m, mediaType, genresMap)).filter(Boolean).slice(0, 5)); } catch (err) { console.error(err); } finally { setIsSearching(false); }}; search();}, [debouncedSearchQuery, language, mediaType, genresMap, fetchApi]);
      
    const fetchFullMediaDetails = useCallback(async (mediaId, type) => { if (!mediaId || !type) return null; try { const lang = language === 'es' ? 'es-ES' : 'en-US'; const data = await fetchApi(`${type}/${mediaId}`, { language: lang, append_to_response: 'credits,videos,watch/providers,similar'}); const director = data.credits?.crew?.find(p => p.job === 'Director'); const similarMedia = data.similar?.results?.map(r => normalizeMediaData(r, type, genresMap)).filter(Boolean).slice(0, 10); const regionData = data['watch/providers']?.results?.[userRegion]; const watchLink = regionData?.link || `https://www.themoviedb.org/${type}/${mediaId}/watch`; const providers = (regionData?.flatrate || []).map(p => ({ ...p, link: watchLink })); const rentProviders = (regionData?.rent || []).map(p => ({ ...p, link: watchLink })); const buyProviders = (regionData?.buy || []).map(p => ({ ...p, link: watchLink })); const combinedPayProviders = [...rentProviders, ...buyProviders]; const uniquePayProviderIds = new Set(); const uniquePayProviders = combinedPayProviders.filter(p => { if (uniquePayProviderIds.has(p.provider_id)) return false; uniquePayProviderIds.add(p.provider_id); return true; }); return { ...data, duration: data.runtime || (data.episode_run_time ? data.episode_run_time[0] : null), providers, rentalProviders: uniquePayProviders, cast: data.credits?.cast?.slice(0, 10) || [], director, seasons: data.number_of_seasons, trailerKey: (data.videos?.results?.filter(v => v.type === 'Trailer' && v.site === 'YouTube') || [])[0]?.key || null, similar: similarMedia, }; } catch (err) { console.error(`Error fetching details for ${type} ${mediaId}`, err); return null; } }, [userRegion, language, genresMap, fetchApi]);
    useEffect(() => { if (!selectedMedia) return; setIsFetchingDetails(true); setMediaDetails({}); fetchFullMediaDetails(selectedMedia.id, selectedMedia.mediaType).then(details => { if (details) setMediaDetails(details); setIsFetchingDetails(false); }); }, [selectedMedia, fetchFullMediaDetails]);
    useEffect(() => { const wm = localStorage.getItem(WATCHED_MEDIA_KEY); const wl = localStorage.getItem(WATCHLIST_KEY); if (wm) { try { setWatchedMedia(JSON.parse(wm)); } catch(e){} } if (wl) { try { setWatchList(JSON.parse(wl)); } catch(e){} } }, []);
    useEffect(() => { localStorage.setItem(WATCHED_MEDIA_KEY, JSON.stringify(watchedMedia)); }, [watchedMedia]);
    useEffect(() => { localStorage.setItem(WATCHLIST_KEY, JSON.stringify(watchList)); }, [watchList]);

    const fetchNewMediaBatch = useCallback(async () => {
        if (!userRegion || !Object.keys(genresMap).length) return;
        setIsDiscovering(true); setError(null);
        if (selectedMedia) setMediaHistory(prev => [...prev, selectedMedia]);
        setSelectedMedia(null); setHasSearched(true);
        try {
            const dateParam = mediaType === 'movie' ? 'primary_release_date' : 'first_air_date';
            const queryParams = { language: (language === 'es' ? 'es-ES' : 'en-US'), 'vote_count.gte': mediaType === 'movie' ? 100 : 50, watch_region: userRegion, ...filters.platform.length > 0 && { with_watch_providers: filters.platform.join('|') }, ...filters.genre.length > 0 && { with_genres: filters.genre.join(',') }, ...filters.excludeGenres.length > 0 && { without_genres: filters.excludeGenres.join(',') }, ...filters.minRating > 0 && { 'vote_average.gte': filters.minRating }, ...filters.decade !== 'todos' && { [`${dateParam}.gte`]: `${parseInt(filters.decade)}-01-01`, [`${dateParam}.lte`]: `${parseInt(filters.decade) + 9}-12-31` } };
            const data = await fetchApi(`discover/${mediaType}`, { ...queryParams, sort_by: 'popularity.desc', page: Math.floor(Math.random() * 20) + 1 });
            const transformedMedia = data.results.map(m => normalizeMediaData(m, mediaType, genresMap)).filter(Boolean);
            const unwatchedMedia = transformedMedia.filter(m => !watchedMedia[m.id]);
            setAllMedia(unwatchedMedia);
            if (unwatchedMedia.length > 0) { const newMedia = unwatchedMedia[Math.floor(Math.random() * unwatchedMedia.length)]; setSelectedMedia(newMedia); } else { setSelectedMedia(null); }
        } catch (err) { console.error("Error discovering media:", err); setError(err.message); } finally { setIsDiscovering(false); }
    }, [filters, language, mediaType, userRegion, genresMap, watchedMedia, selectedMedia, fetchApi]);

    const handleSurpriseMe = useCallback(() => { const available = allMedia.filter(m => !sessionShownMedia.has(m.id)); if (available.length > 0) { const newMedia = available[Math.floor(Math.random() * available.length)]; if (selectedMedia) setMediaHistory(prev => [...prev, selectedMedia]); setSelectedMedia(newMedia); } else { fetchNewMediaBatch(); } }, [allMedia, sessionShownMedia, selectedMedia, fetchNewMediaBatch]);
    const handleRegionChange = (newRegion) => { setUserRegion(newRegion); resetAllState(); setFilters(initialFilters); };
    const handleMediaTypeChange = (type) => { if (type === mediaType) return; resetAllState(); setFilters(initialFilters); setMediaType(type); };
    const handleFilterChange = (type, value) => { setFilters(f => ({ ...f, [type]: value })); resetAllState(); };
    const handleGenreChangeInModal = (genreId, type) => { setFilters(f => { const list = [...(f[type] || [])]; const otherType = type === 'genre' ? 'excludeGenres' : 'genre'; const otherList = [...(f[otherType] || [])]; const index = list.indexOf(genreId); if (index > -1) { list.splice(index, 1); } else { list.push(genreId); const otherIndex = otherList.indexOf(genreId); if(otherIndex > -1) otherList.splice(otherIndex, 1); } return {...f, [type]: list, [otherType]: otherList }; }); };
    const handleQuickFilterToggle = (list, id) => { setFilters(f => { const current = [...f[list]]; const index = current.indexOf(id); if (index > -1) current.splice(index, 1); else current.push(id); return { ...f, [list]: current }; }); resetAllState(); };
    const handlePlatformChange = (id) => { setFilters(f => { const current = [...(f.platform || [])]; const index = current.indexOf(id); if (index > -1) current.splice(index, 1); else current.push(id); return { ...f, platform: current }; }); };
    const handleMarkAsWatched = (media) => { const newWatched = {...watchedMedia}; if (newWatched[media.id]) delete newWatched[media.id]; else newWatched[media.id] = { id: media.id, title: media.title, poster: media.poster, mediaType: media.mediaType, year: media.year }; setWatchedMedia(newWatched); };
    const handleUnwatchMedia = (mediaId) => { const newWatched = {...watchedMedia}; delete newWatched[mediaId]; setWatchedMedia(newWatched); };
    const handleToggleWatchlist = (media) => { const newWatchlist = { ...watchList }; if (newWatchlist[media.id]) delete newWatchlist[media.id]; else newWatchlist[media.id] = { id: media.id, title: media.title, poster: media.poster, mediaType: media.mediaType, year: media.year }; setWatchList(newWatchlist); };
    const handleGoBack = () => { if(mediaHistory.length === 0) return; const newHistory = [...mediaHistory]; const prev = newHistory.pop(); setMediaHistory(newHistory); setSelectedMedia(prev); };
    const handleShare = useCallback(() => { if (!selectedMedia) return; const url = `https://www.themoviedb.org/${selectedMedia.mediaType}/${selectedMedia.id}`; if (navigator.share) { navigator.share({ title: selectedMedia.title, url }).catch(err => console.error(err)); } else { navigator.clipboard.writeText(url).then(() => { setShareStatus('success'); setTimeout(() => setShareStatus('idle'), 2000); }); } }, [selectedMedia]);
    const handleInstallClick = async () => { if (!installPrompt) return; await installPrompt.prompt(); setInstallPrompt(null); };
    const handleActorClick = async (actorId) => { setIsActorModalOpen(true); setIsFetchingActorDetails(true); try { const data = await fetchApi(`person/${actorId}`, { append_to_response: 'movie_credits,tv_credits' }); setActorDetails(data); } catch (error) { console.error("Failed to fetch actor details:", error); } finally { setIsFetchingActorDetails(false); } };
    const handleSimilarMediaClick = (media) => { setSelectedMedia(normalizeMediaData(media, media.media_type || mediaType, genresMap)); closeModal(); };
    const handleSearchResultClick = (media) => { if(selectedMedia) setMediaHistory(prev=>[...prev,selectedMedia]); setSelectedMedia(media); setSearchQuery(''); setSearchResults([]); }

    const quickFilterGenres = useMemo(() => {
        if(mediaType === 'movie') return [{ id: '28', name: 'Action' }, { id: '35', name: 'Comedy' }, { id: '878', name: 'Sci-Fi' }, { id: '53', name: 'Thriller' }];
        return [{ id: '10759', name: 'Action & Adventure' }, { id: '35', name: 'Comedy' }, { id: '10765', name: 'Sci-Fi & Fantasy' }, { id: '80', name: 'Crime' }];
    }, [mediaType]);
    
    const showInstallButton = installPrompt && !isIos && !isStandalone;
    const showIosInstallInstructions = isIos && !isStandalone;
    const isCurrentMediaWatched = selectedMedia && watchedMedia[selectedMedia.id];
    
    if (isLoading) { return ( <div className="min-h-screen bg-[var(--color-bg)] flex items-center justify-center"><div className="loader"></div></div> ); }
    if (error) { return ( <div className="min-h-screen bg-[var(--color-bg)] flex items-center justify-center text-red-500">{error}</div> ); }
    
    return (
        <div className="min-h-screen p-4 font-sans app-container relative">
            <div className="absolute top-4 right-4 z-20"><SettingsDropdown mode={mode} setMode={setMode} accent={accent} setAccent={setAccent} language={language} setLanguage={setLanguage} t={t} openWatchedModal={()=>setIsWatchedModalOpen(true)} openWatchlistModal={()=>setIsWatchlistModalOpen(true)}/></div>
            
            <header className="text-center mb-4 pt-16 sm:pt-16">
                <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)]">{t.title}</h1>
                <h2 className="text-xl sm:text-2xl text-[var(--color-text-secondary)] mt-2">{t.subtitle}</h2>
                <div className="mt-6 inline-flex p-1 rounded-full media-type-switcher"><button onClick={() => handleMediaTypeChange('movie')} className={`px-4 py-2 rounded-full text-sm font-semibold w-28 media-type-btn ${mediaType === 'movie' ? 'media-type-btn-active' : ''}`}>{t.movies}</button><button onClick={() => handleMediaTypeChange('tv')} className={`px-4 py-2 rounded-full text-sm font-semibold w-28 media-type-btn ${mediaType === 'tv' ? 'media-type-btn-active' : ''}`}>{t.tvShows}</button></div>
                <div className="max-w-xl mx-auto mt-6 flex flex-col items-center gap-4">
                  <div ref={searchRef} className="relative w-full">
                      <input type="text" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder={t.searchPlaceholder} className="w-full p-3 pl-10 bg-[var(--color-card-bg)] border border-[var(--color-border)] rounded-full focus:ring-[var(--color-accent)] focus:border-[var(--color-accent)] text-[var(--color-text-primary)] shadow-sm"/>
                      <div className="absolute top-0 left-0 inline-flex items-center p-3">{isSearching ? <div className="small-loader !m-0 !w-5 !h-5"></div> : <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>}</div>
                      {searchResults.length > 0 && (<ul className="absolute w-full mt-2 bg-[var(--color-card-bg)] border border-[var(--color-border)] rounded-lg shadow-lg z-20 max-h-80 overflow-y-auto">{searchResults.map(media => (<li key={media.id} onClick={() => handleSearchResultClick(media)} className="p-3 hover:bg-[var(--color-bg)] cursor-pointer flex items-center gap-4"><img loading="lazy" src={media.poster ? `${TMDB_THUMBNAIL_BASE_URL}${media.poster}` : 'https://placehold.co/92x138/4A5568/FFFFFF?text=?'} alt={media.title} className="w-12 h-auto rounded-md" /><div className="text-left"><p className="font-semibold text-[var(--color-text-primary)]">{media.title}</p><p className="text-sm text-[var(--color-text-secondary)]">{media.year}</p></div></li>))}</ul>)}
                  </div>
                </div>
            </header>

            <div className="max-w-3xl mx-auto mb-8 p-4 bg-[var(--color-card-bg)] rounded-xl shadow-lg border border-[var(--color-border)]">
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-center">
                    <div className="md:col-span-1"><label htmlFor="decade-filter" className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">{t.decade}</label><select id="decade-filter" value={filters.decade} onChange={(e) => handleFilterChange('decade', e.target.value)} className="w-full p-2 bg-[var(--color-bg)] border border-[var(--color-border)] rounded-lg focus:ring-[var(--color-accent)] focus:border-[var(--color-accent)] text-[var(--color-text-primary)]"><option value="todos">{t.allDecades}</option>{[2020, 2010, 2000, 1990, 1980, 1970].map(d=>(<option key={d} value={d}>{`${d}s`}</option>))}</select></div>
                    <div className="md:col-span-1"><label htmlFor="rating-filter" className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">{t.minRating} {Number(filters.minRating).toFixed(1)}</label><input type="range" id="rating-filter" min="0" max="9.5" step="0.5" value={filters.minRating} onChange={(e) => handleFilterChange('minRating', e.target.value)} className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-[var(--color-accent)]"/></div>
                    <button onClick={() => setIsFilterModalOpen(true)} className="w-full sm:col-span-2 md:col-span-1 p-2 bg-[var(--color-bg)] hover:bg-[var(--color-border)] border border-[var(--color-border)] hover:border-[var(--color-accent-text)] text-[var(--color-text-primary)] font-semibold rounded-full transition-colors flex items-center justify-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clipRule="evenodd"/></svg>{t.showFilters}</button>
                </div>
            </div>

            <div className="text-center mb-10 flex justify-center items-center gap-4"><button onClick={handleGoBack} disabled={mediaHistory.length===0} className="p-4 bg-gray-600 hover:bg-gray-500 text-white font-bold rounded-lg shadow-lg transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18"/></svg></button><button onClick={handleSurpriseMe} disabled={isDiscovering || !userRegion} title={!userRegion ? t.selectRegionPrompt : ''} className={`px-8 py-4 bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] text-white font-bold rounded-lg shadow-lg transform hover:scale-105 transition-transform duration-150 text-xl disabled:opacity-50 disabled:cursor-not-allowed`}>{isDiscovering ? t.searching : t.surpriseMe}</button></div>
            
            {isDiscovering ? <SkeletonMediaCard /> : selectedMedia ? (
                 <div ref={cardRef} className="w-full max-w-4xl mx-auto bg-[var(--color-card-bg)] rounded-xl shadow-2xl overflow-hidden mb-10 border border-[var(--color-border)] movie-card-enter">
                    <div className="sm:grid sm:grid-cols-3 sm:gap-x-8">
                        <div className="sm:col-span-1 p-4 sm:p-6"><img loading="lazy" className="h-auto w-3/4 sm:w-full mx-auto object-cover rounded-lg shadow-lg" src={`${TMDB_IMAGE_BASE_URL}${selectedMedia.poster}`} alt={`Poster for ${selectedMedia.title}`}/>{!isFetchingDetails && mediaDetails.trailerKey && (<div className="mt-4 flex justify-center"><button onClick={()=>setIsTrailerModalOpen(true)} className="w-full max-w-[300px] rounded-lg overflow-hidden relative group shadow-lg hover:shadow-2xl transition-shadow"><img loading="lazy" src={`https://img.youtube.com/vi/${mediaDetails.trailerKey}/mqdefault.jpg`} alt="Trailer thumbnail" className="w-full"/><div className="absolute inset-0 bg-black/30 group-hover:bg-black/10 transition-colors flex items-center justify-center"><div className="bg-black/50 backdrop-blur-sm rounded-full p-3"><svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd"/></svg></div></div></button></div>)}</div>
                        <div className="sm:col-span-2 p-4 sm:p-6 sm:pl-0">
                            <div className="text-center sm:text-left"><h2 className="text-3xl sm:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] mb-3 break-words">{selectedMedia.title}</h2><p className="mt-2 text-[var(--color-text-secondary)] text-base leading-relaxed break-words">{selectedMedia.synopsis}</p></div>
                            <div className="mt-6 flex flex-col sm:flex-row gap-4">
                                <button onClick={() => handleMarkAsWatched(selectedMedia)} className={`w-full py-3 px-4 text-white font-bold rounded-lg shadow-md transition-colors flex items-center justify-center gap-2 ${isCurrentMediaWatched ? 'bg-green-600/80 hover:bg-green-600' : 'bg-red-600/80 hover:bg-red-600' }`}>{isCurrentMediaWatched ? t.cardIsWatched : t.cardMarkAsWatched}</button>
                                <button onClick={() => handleToggleWatchlist(selectedMedia)} className="w-full py-3 px-4 bg-sky-600/80 hover:bg-sky-600 text-white font-bold rounded-lg shadow-md transition-colors flex items-center justify-center gap-2">{watchList[selectedMedia.id] ? <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-3.13L5 18V4z"/></svg> : <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"/></svg>}{t.saveForLater}</button>
                                <button onClick={handleShare} className="w-full py-3 px-4 bg-blue-600/80 hover:bg-blue-600 text-white font-bold rounded-lg shadow-md transition-colors flex items-center justify-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z"/></svg>{shareStatus === 'success' ? t.shareSuccess : t.shareButton}</button>
                            </div>
                            <div className="mt-6 pt-4 border-t border-[var(--color-border)]"><h3 className="text-lg font-semibold text-[var(--color-accent-text)] mb-2">{t.details}</h3><MediaCardContent media={selectedMedia} details={mediaDetails} isFetching={isFetchingDetails} t={t} userRegion={userRegion} handleActorClick={handleActorClick}/></div>
                        </div>
                    </div>
                    <div className="p-4 sm:p-6 bg-[var(--color-bg)]/50 border-t border-[var(--color-border)]"><h3 className="text-xl font-semibold text-[var(--color-accent-text)] mb-3">{t.cardSimilarMovies}</h3>{isFetchingDetails ? <div className="flex justify-center"><div className="small-loader"></div></div> : mediaDetails.similar?.length > 0 ? (<div className="horizontal-scroll-container">{mediaDetails.similar.map(media => (<button key={media.id} onClick={()=>handleSimilarMediaClick(media)} className="flex-shrink-0 w-32 text-center group hover:scale-105 transition-transform duration-150"><div className="w-full aspect-[2/3] bg-[var(--color-border)] rounded-lg overflow-hidden"><img loading="lazy" src={media.poster ? `${TMDB_IMAGE_BASE_URL}${media.poster}` : 'https://placehold.co/200x300/4A5568/FFFFFF?text=N/A'} alt={media.title} className="w-full h-full object-cover"/></div><span className="block w-full text-xs text-center text-[var(--color-text-secondary)] group-hover:text-[var(--color-accent-text)] transition-colors pt-2 truncate">{media.title}</span></button>))}</div>) : <p className="text-sm text-[var(--color-text-secondary)] text-sm">{t.noMoviesFound}</p>}</div>
                </div>
            ) : ( <div className="text-center text-gray-400 mt-10 text-lg">{ hasSearched && allMedia.length === 0 && !isDiscovering ? (<div><p>{t.noMoviesFound}</p><button onClick={resetAndClearFilters} className="mt-4 px-4 py-2 bg-[var(--color-accent)] text-white rounded-lg">{t.clearAllFilters}</button></div>) : !hasSearched && t.welcomeMessage}</div> )}
            
            <FilterModal isOpen={isFilterModalOpen} close={()=>setIsFilterModalOpen(false)} handleClearFilters={resetAndClearFilters} filters={filters} handleGenreChangeInModal={handleGenreChangeInModal} handlePlatformChange={handlePlatformChange} genresMap={genresMap} allPlatformOptions={allPlatformOptions} platformSearchQuery={platformSearchQuery} setPlatformSearchQuery={setPlatformSearchQuery} t={t} />
            <WatchedMediaModal isOpen={isWatchedModalOpen} close={()=>setIsWatchedModalOpen(false)} watchedMedia={watchedMedia} handleUnwatchMedia={handleUnwatchMedia} mediaType={mediaType} t={t}/>
            <WatchlistModal isOpen={isWatchlistModalOpen} close={()=>setIsWatchlistModalOpen(false)} watchlist={watchList} handleToggleWatchlist={handleToggleWatchlist} mediaType={mediaType} t={t} />
            <ActorDetailsModal isOpen={isActorModalOpen} close={()=>setIsActorModalOpen(false)} actorDetails={actorDetails} isFetching={isFetchingActorDetails} handleSimilarMediaClick={handleSimilarMediaClick} t={t}/>
            {/* The similar media click modal will need a separate component or more complex state */}
            
            {!userRegion && ( <div className="fixed inset-0 bg-gray-900 bg-opacity-90 z-40 flex items-center justify-center p-4"><div className="text-center max-w-md bg-[var(--color-card-bg)] p-8 rounded-xl shadow-2xl"><h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)] mb-4">{t.selectRegionPrompt}</h1>{availableRegions.length > 0 ? (<select id="initial-region-filter" onChange={(e) => handleRegionChange(e.target.value)} defaultValue="" className="w-full p-3 bg-[var(--color-bg)] border border-[var(--color-border)] rounded-lg focus:ring-[var(--color-accent)] focus:border-[var(--color-accent)] text-[var(--color-text-primary)]"><option value="" disabled>-- {t.region} --</option>{availableRegions.map(region => (<option key={region.iso_3166_1} value={region.iso_3166_1}>{region.english_name}</option>))}</select>) : (<div className="loader"></div>)}</div></div>)}
            <footer className="text-center mt-auto py-4 text-sm text-[var(--color-text-subtle)]">{showInstallButton && <InstallPwaButton t={t} handleInstallClick={handleInstallClick}/>}{showIosInstallInstructions && <InstallPwaInstructions t={t}/>}<p className="pt-4">{t.footer} <a href="https://www.themoviedb.org/" target="_blank" rel="noopener noreferrer" className="text-[var(--color-accent-text)] hover:underline">TMDb</a>.</p></footer>
        </div>
    );
};

ReactDOM.render(<App />, document.getElementById('root'));